//file:noinspection ForeignDelegate
//file:noinspection GroovyUnusedAssignment
import io.github.arhor.dotenv.Dotenv

plugins {
    id "base"
    id "java-platform"
}

ext {
    env = Dotenv.configure().location("$rootDir").filename(".env").load()
}

wrapper {
    gradleVersion = project.property("versions.gradle")
}

dependencies {
    constraints {
        // @formatter:off
        [
            ["com.fasterxml.jackson.core", "jackson-databind"                   , "versions.jackson"],
            ["com.google.code.findbugs"  , "jsr305"                             , "versions.findbugsJsr305"],
            ["com.ninja-squad"           , "springmockk"                        , "versions.springMockk"],
            ["com.tngtech.archunit"      , "archunit-junit5"                    , "versions.archunit"],
            ["de.siegmar"                , "fastcsv"                            , "versions.fastcsv"],
            ["jakarta.validation"        , "jakarta.validation-api"             , "versions.jakartaValidation"],
            ["org.codehaus.janino"       , "janino"                             , "versions.janino"],
            ["org.javamoney"             , "moneta"                             , "versions.javamoneyMoneta"],
            ["org.jetbrains.kotlinx"     , "kotlinx-coroutines-core"            , "versions.kotlinCoroutines"],
            ["org.jetbrains.kotlinx"     , "kotlinx-coroutines-slf4j"           , "versions.kotlinCoroutines"],
            ["org.mapstruct"             , "mapstruct"                          , "versions.mapstruct"],
            ["org.mapstruct"             , "mapstruct-processor"                , "versions.mapstruct"],
            ["org.springdoc"             , "springdoc-openapi-starter-webmvc-ui", "versions.springDocOpenapi"],
        ].each { group, name, version -> api("$group:$name:${project.property(version)}") }
        // @formatter:on
    }
}

def stage = tasks.register("stage", Jar) {
    dependsOn(":apps:client:build", ":apps:server:build")

    group = "build"
    description = "Creates composite Jar file including client and server part"

    entryCompression = ZipEntryCompression.STORED

    def serverBuild = zipTree("${project(":apps:server").buildDir}/libs/server.jar")
    def clientBuild = "${project(":apps:client").projectDir}/dist"

    from(serverBuild) { into "/" }
    from(clientBuild) { into "/BOOT-INF/classes/static" }

    manifest {
        from {
            serverBuild.find { it.name == "MANIFEST.MF" }
        }
    }
}
