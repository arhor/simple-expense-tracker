plugins {
    id "com.adarshr.test-logger"
    id "io.freefair.lombok"
    id "io.spring.dependency-management"
    id "jacoco"
    id "java"
    id "org.flywaydb.flyway"
    id "org.springframework.boot"
    id "org.springframework.experimental.aot"
}

description = "Server-side application based on Spring Boot %s and Java %s".formatted(
    property("app.version.springBoot"),
    property("app.version.java"),
)

java {
    sourceCompatibility = property("app.version.java")
    targetCompatibility = property("app.version.java")
}

jacoco {
    toolVersion = property("app.version.jacoco")
}

flyway {
    url = env.getRequired "JDBC_DATABASE_URL"
    user = env.getRequired "JDBC_DATABASE_USERNAME"
    password = env.getRequired "JDBC_DATABASE_PASSWORD"

    driver = "org.postgresql.Driver"
    encoding = "UTF-8"
    locations = ["classpath:db/migration"]
    baselineVersion = "0.0"
    baselineOnMigrate = true
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    implementation {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "moneta-convert-ecb"
        exclude module: "moneta-convert-imf"
    }
    testImplementation {
        exclude module: "junit-vintage-engine"
    }
}

dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:${property("app.version.mapstruct")}"
    annotationProcessor "org.springframework:spring-context-indexer"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly "org.mapstruct:mapstruct:${property("app.version.mapstruct")}"
    runtimeOnly "org.postgresql:postgresql"
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    implementation project(":app-model")
    implementation "de.siegmar:fastcsv:${property("app.version.fastcsv")}"
    implementation "org.apache.commons:commons-lang3:${property("app.version.apacheCommonsLang")}"
    implementation "org.apache.commons:commons-collections4:${property("app.version.apacheCommonsCollections")}"
    implementation "org.flywaydb:flyway-core"
    implementation "org.javamoney:moneta:${property("app.version.javamoneyMoneta")}"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.session:spring-session-core"

    testRuntimeOnly "org.postgresql:postgresql"

    testImplementation "com.tngtech.archunit:archunit-junit5:${property("app.version.archunit")}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${property("app.version.testcontainers")}"
    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder:tiny"
    environment = ["BP_NATIVE_IMAGE": "true"]
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    shouldRunAfter test
    applyJaCoCoExclusions(classDirectories)
}

jacocoTestCoverageVerification {
    shouldRunAfter jacocoTestReport
    applyJaCoCoExclusions(classDirectories)

    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }
}

check {
    dependsOn = [
        test,
        jacocoTestReport,
        jacocoTestCoverageVerification,
    ]
}

void applyJaCoCoExclusions(ConfigurableFileCollection classDirectories) {
    classDirectories.from = files(classDirectories.files.collect {
        fileTree(
            dir: it,
            exclude: [
                "com/github/arhor/simple/expense/tracker/Application.class",
                "com/github/arhor/simple/expense/tracker/web/error/ErrorResponse.class",
                "com/github/arhor/simple/expense/tracker/web/error/GlobalExceptionHandler.class",
                "com/github/arhor/simple/expense/tracker/**/config/*",
                "com/github/arhor/simple/expense/tracker/**/exception/*",
                "com/github/arhor/simple/expense/tracker/**/model/*",
            ]
        )
    })
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
        "-Xlint:deprecation",
        "-Xlint:unchecked",
        "-parameters",
    ]
}
